{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/assign.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( '@stdlib/assert-is-little-endian' );\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar DataView = require( '@stdlib/array-dataview' );\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @returns {Uint8Array} byte array\n*\n* @example\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x ) {\n\tvar bytes;\n\tvar view;\n\tvar hi;\n\tvar lo;\n\n\tbytes = new Uint8Array( 8 );\n\tif ( x === 0 ) {\n\t\treturn bytes;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tview = new DataView( bytes.buffer );\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tview.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tview.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\treturn bytes;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( '@stdlib/assert-is-little-endian' );\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar DataView = require( '@stdlib/array-dataview' );\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n// Byte array workspace:\nvar BYTES = new Uint8Array( 8 );\nvar VIEW = new DataView( BYTES.buffer );\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var Uint8Array = require( '@stdlib/array-uint8' );\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x, out, stride, offset ) {\n\tvar hi;\n\tvar lo;\n\tvar i;\n\n\tif ( x === 0 ) {\n\t\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\t\tout[ offset ] = 0;\n\t\t\toffset += stride;\n\t\t}\n\t\treturn out;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tVIEW.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tVIEW.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\tout[ offset ] = BYTES[ i ];\n\t\toffset += stride;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* @module @stdlib/number-float64-base-to-int64-bytes\n*\n* @example\n* var float64ToInt64Bytes = require( '@stdlib/number-float64-base-to-int64-bytes' );\n*\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*\n* @example\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var float64ToInt64Bytes = require( '@stdlib/number-float64-base-to-int64-bytes' );\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["IS_LITTLE_ENDIAN","require$$0","Uint8Array","require$$1","DataView","require$$2","floor","require$$3","main","x","bytes","view","hi","lo","buffer","setUint32","BYTES","VIEW","assign","out","stride","offset","i","length","lib"],"mappings":";;wcAsBA,IAAIA,EAAmBC,EACnBC,EAAaC,EACbC,EAAWC,EACXC,EAAQC,EA2DZ,IAAAC,EA/BA,SAA8BC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EAGJ,OADAH,EAAQ,IAAIR,EAAY,GACb,IAANO,IAILI,GAjCc,WAiCRJ,KAAc,EAGpBG,EAAKN,EAAOG,EAjCA,YAoCZE,EAAO,IAAIP,EAAUM,EAAMI,QACtBd,GACJW,EAAKI,UAAW,EAAGF,EAAIb,GACvBW,EAAKI,UAAW,EAAGH,EAAIZ,KAEvBW,EAAKI,UAAW,EAAGH,EAAIZ,GACvBW,EAAKI,UAAW,EAAGF,EAAIb,KAfhBU,GCvCLV,EAAmBC,EAEnBG,EAAWC,EACXC,EAAQC,EAYRS,EAAQ,IAdKb,EAcW,GACxBc,EAAO,IAAIb,EAAUY,EAAMF,QA6D/B,ICxDAN,EAAAL,EACAe,EDmBA,SAA8BT,EAAGU,EAAKC,EAAQC,GAC7C,IAAIT,EACAC,EACAS,EAEJ,GAAW,IAANb,EAAU,CACd,IAAMa,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,IAC9BH,EAAKE,GAAW,EAChBA,GAAUD,EAEX,OAAOD,EAgBR,IAbAN,GA7Cc,WA6CRJ,KAAc,EAGpBG,EAAKN,EAAOG,EA7CA,YAgDPT,GACJiB,EAAKF,UAAW,EAAGF,EAAIb,GACvBiB,EAAKF,UAAW,EAAGH,EAAIZ,KAEvBiB,EAAKF,UAAW,EAAGH,EAAIZ,GACvBiB,EAAKF,UAAW,EAAGF,EAAIb,IAElBsB,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,IAC9BH,EAAKE,GAAWL,EAAOM,GACvBD,GAAUD,EAEX,OAAOD,GCnDRlB,EAOAO,EAAA,SAAAU,GAKA,IAAAM,EAAAhB"}